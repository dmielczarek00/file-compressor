apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: "kubernetes.io/hostname"
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: backend
      containers:
        - name: backend
          image: k8s-master:5000/backend:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8002
          command: ["/bin/sh"]
          args:
            - "-c"
            - |
              envsubst < /config/.env.template > /app/.env && \
              python worker.py
          env:
            - name: DATABASE_PASS
              valueFrom:
                secretKeyRef:
                  name: front-end-secrets
                  key: DATABASE_PASS
          volumeMounts:
            - name: config-volume
              mountPath: /config/.env.template
              subPath: .env.template
            - name: compression-volume
              mountPath: /mnt/compression-queue
      volumes:
        - name: config-volume
          configMap:
            name: env-template
        - name: compression-volume
          persistentVolumeClaim:
            claimName: pvc-compression-queue

  volume-test:
    needs: [deploy]
    runs-on: [self-hosted, michal-runner]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build test image
        run: |
          docker build -t k8s-master:5000/tests:latest -f test/Dockerfile .
          docker push k8s-master:5000/tests:latest

      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_CREEPERASEK }}" > $HOME/.kube/config

      - name: Deploy test job
        run: |
          kubectl apply -f - <<EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: compression-test
          spec:
            template:
              spec:
                containers:
                - name: compression-test
                  image: k8s-master:5000/tests:latest
                  command: ["/bin/bash"]
                  volumeMounts:
                  - name: compression-volume
                    mountPath: /srv/nfs/compression-queue/pending
                volumes:
                - name: compression-volume
                  persistentVolumeClaim:
                    claimName: pvc-compression-queue
                - name: test-results
                  emptyDir: {}
                restartPolicy: Never
            backoffLimit: 1
            ttlSecondsAfterFinished: 86400
          EOF

      - name: Wait for job completion
        run: |
          kubectl wait --for=condition=complete job/compression-test --timeout=300s

      - name: Get job logs
        run: |
          POD_NAME=$(kubectl get pods -l job-name=compression-test -o jsonpath='{.items[0].metadata.name}')
          kubectl logs $POD_NAME

      - name: Clean up
        if: always()
        run: |
          kubectl delete job compression-test