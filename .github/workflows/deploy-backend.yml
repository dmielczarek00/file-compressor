name: Deploy and Test Backend

on:
  push:
    branches: [michal-branch]

jobs:
  deploy:
    runs-on: [self-hosted, michal-runner]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build and push backend image
        run: |
          docker build -t k8s-master:5000/backend:${{ github.sha }} ./backend
          docker tag k8s-master:5000/backend:${{ github.sha }} k8s-master:5000/backend:latest
          docker push k8s-master:5000/backend:${{ github.sha }}
          docker push k8s-master:5000/backend:latest

      - name: Configure Kubernetes
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_CREEPERASEK }}" > $HOME/.kube/config
          kubectl apply -f nfs/pv-nfs.yaml
          kubectl apply -f nfs/pvc-nfs.yaml

      - name: Deploy backend
        run: |
          kubectl create configmap front-end-env-template \
            --from-file=.env.template=config/.env.template \
            --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl create secret generic front-end-secrets \
            --from-literal=DATABASE_PASS=${{ secrets.POSTGRES_PASS }} \
            --dry-run=client -o yaml | kubectl apply -f -

          kubectl apply -f backend/backend-deployment.yml
          kubectl apply -f backend/backend-service.yml
          kubectl rollout restart deployment/backend-deployment
          kubectl rollout status deployment/backend-deployment

      - name: Configure autoscaling
        run: |
          mkdir -p /opt/actions-runner/crontab
          cp crontab/backend-scaler.sh /opt/actions-runner/crontab/
          chmod +x /opt/actions-runner/crontab/backend-scaler.sh
          (crontab -l 2>/dev/null | grep -v backend-scaler.sh; \
           echo '* * * * * for _ in {1..4}; do /opt/actions-runner/crontab/backend-scaler.sh; sleep 15; done') | crontab -

  test:
    needs: deploy
    runs-on: [self-hosted, michal-runner]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Kubernetes access
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_CREEPERASEK }}" > $HOME/.kube/config
      - name: Install NFS client
        run: |
          sudo apt-get update
          sudo apt-get install -y nfs-common

      - name: Mount NFS share
        run: |
          sudo mkdir -p /mnt/nfs/compression-queue
          sudo mount -t nfs 192.168.0.190:/srv/nfs/compression-queue /mnt/nfs/compression-queue

      - name: Copy test files to NFS
        run: |
          cp tests/test.jpg /mnt/nfs/compression-queue/test.jpg
          cp tests/test.mp4 /mnt/nfs/compression-queue/test.mp4
          mkdir -p /mnt/nfs/compression-queue/control
          cp tests/control/test_control.jpg /mnt/nfs/compression-queue/control/test_control.jpg
          cp tests/control/test_control.mp4 /mnt/nfs/compression-queue/control/test_control.mp4

      - name: Unmount NFS
        if: always()
        run: |
          sudo umount /mnt/nfs/compression-queue

      - name: Build and run tests
        run: |
          cd tests
          docker build -t k8s-master:5000/volume-test:${{ github.sha }} .
          docker push k8s-master:5000/volume-test:${{ github.sha }}
          
          sed "s/{{TAG}}/${{ github.sha }}/g" volume-test-job.yaml | kubectl apply -f -
          kubectl wait --for=condition=complete --timeout=600s job/volume-test-job
          kubectl logs job/volume-test-job
          
          kubectl delete job volume-test-job

