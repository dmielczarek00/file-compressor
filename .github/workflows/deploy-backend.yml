name: Deploy Backend

on:
  push:
    branches:
      - michal-branch

jobs:
  deploy:
    if: true
    runs-on: [self-hosted, michal-runner]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build -t k8s-master:5000/backend:${{ github.sha }} ./backend
          docker tag k8s-master:5000/backend:${{ github.sha }} k8s-master:5000/backend:latest

      - name: Push Docker image
        run: |
          docker push k8s-master:5000/backend:${{ github.sha }}
          docker push k8s-master:5000/backend:latest

      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_CREEPERASEK }}" > $HOME/.kube/config

      - name: Deploy NFS storage (PV & PVC)
        run: |
          kubectl apply -f nfs/pv-nfs.yaml
          kubectl apply -f nfs/pvc-nfs.yaml

      - name: Create ConfigMap from .env.template
        run: |
          kubectl create configmap front-end-env-template \
            --from-file=.env.template=config/.env.template \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Secrets
        run: |
          kubectl create secret generic front-end-secrets \
            --from-literal=DATABASE_PASS=${{ secrets.POSTGRES_PASS }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f backend/backend-deployment.yml
          kubectl apply -f backend/backend-service.yml
          kubectl rollout restart deployment/backend-deployment
          kubectl rollout status deployment/backend-deployment

      - name: Deploy scaling script
        run: |
          mkdir -p /opt/actions-runner/crontab
          cp crontab/backend-scaler.sh /opt/actions-runner/crontab/backend-scaler.sh
          chmod +x /opt/actions-runner/crontab/backend-scaler.sh
  
      - name: Add scaling script to crontab
        run: |
          if ! crontab -l 2>/dev/null | grep -q 'backend-scaler.sh'; then
            (crontab -l 2>/dev/null; echo '* * * * * /opt/actions-runner/crontab/backend-scaler.sh; sleep 15; /opt/actions-runner/crontab/backend-scaler.sh; sleep 15; /opt/actions-runner/crontab/backend-scaler.sh; sleep 15; /opt/actions-runner/crontab/backend-scaler.sh') | crontab -
          fi
          

    test:
      volume-test:
        needs: [ deploy ]
        runs-on: [ self-hosted, michal-runner ]
        steps:
          - name: Checkout code
            uses: actions/checkout@v4

          - name: Set up test environment
            run: |
              chmod +x volume-test.sh

              mkdir -p source reference

              wget -O source/test.jpg https://raw.githubusercontent.com/dmielczarek00/file-compressor/michal-branch/test/files/test1.jpg
              wget -O source/test.mp4 https://raw.githubusercontent.com/dmielczarek00/file-compressor/michal-branch/test/files/test2.mp4

          - name: Run compression tests
            run: ./volume-test.sh

          - name: Upload test results
            if: always()
            uses: actions/upload-artifact@v4
            with:
              name: compression-results
              path: |
                ./compressed/
                ./reference/