name: Deploy Backend

on:
  push:
    branches:
      - michal-branch

jobs:
  deploy:
    if: true
    runs-on: [self-hosted, michal-runner]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build -t k8s-master:5000/backend:${{ github.sha }} ./backend
          docker tag k8s-master:5000/backend:${{ github.sha }} k8s-master:5000/backend:latest

      - name: Push Docker image
        run: |
          docker push k8s-master:5000/backend:${{ github.sha }}
          docker push k8s-master:5000/backend:latest

      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_CREEPERASEK }}" > $HOME/.kube/config

      - name: Deploy NFS storage (PV & PVC)
        run: |
          kubectl apply -f nfs/pv-nfs.yaml
          kubectl apply -f nfs/pvc-nfs.yaml

      - name: Create ConfigMap from .env.template
        run: |
          kubectl create configmap front-end-env-template \
            --from-file=.env.template=config/.env.template \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Secrets
        run: |
          kubectl create secret generic front-end-secrets \
            --from-literal=DATABASE_PASS=${{ secrets.POSTGRES_PASS }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f backend/backend-deployment.yml
          kubectl apply -f backend/backend-service.yml
          kubectl rollout restart deployment/backend-deployment
          kubectl rollout status deployment/backend-deployment

      - name: Deploy scaling script
        run: |
          mkdir -p /opt/actions-runner/crontab
          cp crontab/backend-scaler.sh /opt/actions-runner/crontab/backend-scaler.sh
          chmod +x /opt/actions-runner/crontab/backend-scaler.sh

      - name: Add scaling script to crontab
        run: |
          if ! crontab -l 2>/dev/null | grep -q 'backend-scaler.sh'; then
            (crontab -l 2>/dev/null; echo '* * * * * /opt/actions-runner/crontab/backend-scaler.sh; sleep 15; /opt/actions-runner/crontab/backend-scaler.sh; sleep 15; /opt/actions-runner/crontab/backend-scaler.sh; sleep 15; /opt/actions-runner/crontab/backend-scaler.sh') | crontab -
          fi

  volume-test:
    needs: [deploy]
    runs-on: [self-hosted, michal-runner]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up test environment
        run: |
          chmod +x test/volume-test.sh
          
          mkdir -p source reference
          
          wget -O source/test1.jpg https://raw.githubusercontent.com/dmielczarek00/file-compressor/michal-branch/test/files/test1.jpg
          wget -O source/test2.mp4 https://raw.githubusercontent.com/dmielczarek00/file-compressor/michal-branch/test/files/test2.mp4

      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_CREEPERASEK }}" > $HOME/.kube/config

      - name: Create ConfigMap with test files
        run: |
          kubectl create configmap compression-test-files \
            --from-file=test1.jpg=source/test1.jpg \
            --from-file=test2.mp4=source/test2.mp4 \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy test job
        run: |
          kubectl apply -f - <<EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: compression-test
          spec:
            template:
              spec:
                containers:
                - name: compression-test
                  image: k8s-master:5000/tests:latest
                  command: ["/bin/bash", "/app/volume-test.sh"]
                  volumeMounts:
                  - name: test-files
                    mountPath: /app/source
                  - name: compression-volume
                    mountPath: /srv/nfs/compression-queue/pending
                  - name: test-results
                    mountPath: /app/reference
                volumes:
                - name: test-files
                  configMap:
                    name: compression-test-files
                - name: compression-volume
                  persistentVolumeClaim:
                    claimName: pvc-compression-queue
                - name: test-results
                  emptyDir: {}
                restartPolicy: Never
            backoffLimit: 1
            ttlSecondsAfterFinished: 86400
          EOF

      - name: Wait for job completion
        run: |
          kubectl wait --for=condition=complete job/compression-test --timeout=300s

      - name: Get job logs
        run: |
          POD_NAME=$(kubectl get pods -l job-name=compression-test -o jsonpath='{.items[0].metadata.name}')
          kubectl logs $POD_NAME

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compression-results
          path: |
            ./reference/

      - name: Clean up
        if: always()
        run: |
          kubectl delete job compression-test
          kubectl delete configmap compression-test-files